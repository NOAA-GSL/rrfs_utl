cmake_minimum_required(VERSION 3.15)

project(RRFS_Utl
	VERSION 1.0.0
	LANGUAGES C Fortran)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake")
set(CMAKE_DIRECTORY_LABELS ${PROJECT_NAME})

include(compiler_flags)
include(GNUInstallDirs)

if(NOT CMAKE_BUILD_TYPE MATCHES "^(Debug|Release|RelWithDebInfo|MinSizeRel|Production)$")
  message(STATUS "Setting build type to 'Release' as none was specified.")
  set(CMAKE_BUILD_TYPE
      "Release"
      CACHE STRING "Choose the type of build." FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS "Debug" "Release" "MinSizeRel" "RelWithDebInfo" "Production")
endif()

if(NOT CMAKE_C_COMPILER_ID MATCHES "^(GNU|Intel|Clang|AppleClang)$")
  message(WARNING "${CMAKE_C_COMPILER_ID} is not supported.")
endif()

if(NOT CMAKE_Fortran_COMPILER_ID MATCHES "^(GNU|Intel)$")
  message(WARNING "${CMAKE_Fortran_COMPILER_ID} is not supported.")
endif()

# User options
option(OPENMP "Enable OpenMP Threading" ON)

# Echo user options
message(STATUS "OPENMP ................. ${OPENMP}")

option(FV3_ENSMEAN_RECENTER "Enable building FV3_ensmean_recenter.fd" ON)
option(ADJUST_SOILTQ "Enable building adjust_soiltq.fd" ON)
option(BLENDING "Enable building blending.fd" ON)
option(BUFRSND "Enable building bufrsnd.fd" ON)
option(CLOUDANALYSIS "Enable building cloudanalysis.fd" ON)
option(ENS_MEAN_RECENTER "Enable building ens_mean_recenter.fd" ON)
option(GEN_CS "Enable building gen_cs.fd" ON)
option(LAKESURGERY "Enable building lakesurgery.fd" ON)
option(LARCCLD "Enable building larccld.fd" ON)
option(LIGHTNING "Enable building lightning.fd" ON)
option(METARCLD "Enable building metarcld.fd" ON)
option(MOSAIC "Enable building mosaic.fd" ON)
option(PM "Enable building pm.fd" ON)
option(RADMON "Enable building radmon.fd" ON)
option(REF2TTEN "Enable building ref2tten.fd" ON)
option(RTMA_MINMAXTRH "Enable building rtma_minmaxtrh.fd" ON)
option(UPDATE_BC "Enable building update_bc.fd" ON)
option(UPDATE_GVF "Enable building update_gvf.fd" ON)
option(UPDATE_ICE "Enable building update_ice.fd" ON)
option(UPDATE_SNOW "Enable building update_snow.fd" ON)
option(UPDATE_SST "Enable building update_sst.fd" ON)
option(USE_RAPHRRR_SFC "Enable building use_raphrrr_sfc.fd" ON)

# Dependencies
find_package(MPI REQUIRED)
find_package(NetCDF REQUIRED Fortran)
if(OPENMP)
  find_package(OpenMP REQUIRED)
endif()

# NCEPLibs dependencies
find_package(bacio REQUIRED)
find_package(g2 REQUIRED)
find_package(g2tmpl REQUIRED)
find_package(sp REQUIRED)
find_package(ip REQUIRED)
find_package(w3emc REQUIRED)
find_package(w3nco REQUIRED)
find_package(bufr REQUIRED)
find_package(wrf_io REQUIRED)

# Other dependencies
find_package(ncdiag REQUIRED)
find_package(gsi REQUIRED)

add_subdirectory(baselib/regional_esg_grid.fd)
add_subdirectory(baselib)
if(FV3_ENSMEAN_RECENTER)
  add_subdirectory(FV3_ensmean_recenter.fd)
endif()
if(ADJUST_SOILTQ)
  add_subdirectory(adjust_soiltq.fd)
endif()
if(BLENDING)
  add_subdirectory(blending.fd)
endif()
if(BUFRSND)
  add_subdirectory(bufrsnd.fd)
endif()
if(CLOUDANALYSIS)
  add_subdirectory(cloudanalysis.fd)
endif()
if(ENS_MEAN_RECENTER)
  add_subdirectory(ens_mean_recenter.fd)
endif()
if(GEN_CS)
  add_subdirectory(gen_cs.fd)
endif()
if(LAKESURGERY)
  add_subdirectory(lakesurgery.fd)
endif()
if(LARCCLD)
  add_subdirectory(larccld.fd)
endif()
if(LIGHTNING)
  add_subdirectory(lightning.fd)
endif()
if(METARCLD)
  add_subdirectory(metarcld.fd)
endif()
if(MOSAIC)
  add_subdirectory(mosaic.fd)
endif()
if(PM)
  add_subdirectory(pm.fd)
endif()
if(RADMON)
  add_subdirectory(radmon.fd)
endif()
if(REF2TTEN)
  add_subdirectory(ref2tten.fd)
endif()
if(RTMA_MINMAXTRH)
  add_subdirectory(rtma_minmaxtrh.fd)
endif()
if(UPDATE_BC)
  add_subdirectory(update_bc.fd)
endif()
if(UPDATE_GVF)
  add_subdirectory(update_gvf.fd)
endif()
if(UPDATE_ICE)
  add_subdirectory(update_ice.fd)
endif()
if(UPDATE_SNOW)
  add_subdirectory(update_snow.fd)
endif()
if(UPDATE_SST)
  add_subdirectory(update_sst.fd)
endif()
if(USE_RAPHRRR_SFC)
  add_subdirectory(use_raphrrr_sfc.fd)
endif()

