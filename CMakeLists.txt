cmake_minimum_required(VERSION 2.8)

set(ENV{CC} "icc")
set(ENV{CXX} "icpc")
set(ENV{FC} "mpif90 -f90=ifort")

project(data_process)
enable_language (Fortran)
enable_language (C)

site_name(HOSTNAME)
message("The hostname is  ${HOSTNAME}" )
string(REGEX MATCH "cheyenne" HOST-Cheyenne ${HOSTNAME}  )
string(REGEX MATCH "tfe[0-9]" HOST-Theia ${HOSTNAME} )
string(REGEX MATCH "hfe[0-9]" HOST-Hera  ${HOSTNAME} )
string(REGEX MATCH "m1"       HOST-Dell  ${HOSTNAME} )
string(REGEX MATCH "v1"       HOST-Dell  ${HOSTNAME} )
string(REGEX MATCH "Orion"    HOST-Orion ${HOSTNAME} )
if(EXISTS /jetmon)
  set(HOST-Jet "True" )
elseif(EXISTS /ioddev_dell)
  set(HOST-Dell "True" )
endif()

### Do the following to load required compiling modules on Jet
#     source /home/rtrr/PARM_EXEC/modulefiles/modulefile.jet.GSI_UPP_WRF 
###

if(HOST-Cheyenne)
  ###SET(GSIBUILD  "/glade/work/geguo/MPMC/b_release_v3.7/ci06.intel_17.0.1.mpt_2.15f")
  SET(GSIBUILD  "/glade/p/ral/jntp/gge/precompiled/GSI/build")
  set(COMUPP "/glade/p/ral/jntp/gge/precompiled/GSD_UPP/comupp")
  set(wrfframe "/glade/p/ral/jntp/gge/precompiled/WRFV3.9/frame/pack_utils.o")
  set(WPSBUILD "/glade/p/ral/jntp/gge/precompiled/WPSV3.9.0.01")
  ### MPI_Fortran_LIBRARIES
  SET(MPILIB  "/usr/lib64/libpthread.so;/glade/u/apps/ch/opt/mpt/2.19/lib/libmpi.so")
  ### BLAS_iomp5_LIBRARY
  SET(LIBIOMP5  "/glade/u/apps/opt/intel/2017u1/compilers_and_libraries/linux/lib/intel64/libiomp5.so")
  SET(LIBPNG    "/usr/lib64/libpng.so")
elseif(HOST-Jet)
  SET(GSIBUILD  "${PROJECT_BINARY_DIR}/../../gsi/build")
elseif(HOST-Hera)
  SET(GSIBUILD  "${PROJECT_BINARY_DIR}/../../gsi/build")
elseif(HOST-Orion)
  SET(GSIBUILD  "${PROJECT_BINARY_DIR}/../../gsi/build")
elseif(HOST-Dell)
  SET(GSIBUILD  "${PROJECT_BINARY_DIR}/../../gsi/build")
  set(ENV{CC} "mpcc")
  set(ENV{CXX} "mpCC")
  set(ENV{FC} "mpfort")
  SET(LIBZ      "/usr/lib64/libz.so")
  SET(LIBJASPER "$ENV{JASPERLIB}/libjasper.so.1.0.0")
else()
  message(FATAL_ERROR "
       Unknow host ${HOSTNAME}

        ")
endif()

#----------------------------Normally no changes needed after this line ------------------------
SET(NETCDFENV  "$ENV{NETCDF}")

SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin")
SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_INCLUDE_OUTPUT_DIRECTORY "${PROJECT_BINARY_DIR}/include")
set(Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include")
set(CMAKE_Fortran_MODULE_DIRECTORY "${PROJECT_BINARY_DIR}/include")

SET(GSIINC  "${GSIBUILD}/include")
SET(NETCDFINC  "${NETCDFENV}/include")
SET(G2INC  "$ENV{G2_INC4}")

SET(GSILIB  "${GSIBUILD}/lib/libgsilib_shrd.a")
SET(wrflib  "${GSIBUILD}/lib/libgsilib_wrf.a")
SET(wrflibio  "$ENV{WRF_IO_LIB}")

if(HOST-Dell)
  SET(LIBZ      "$ENV{ZLIB_LIBRARIES}/libz.a")
  SET(NETCDFLIB  "-L${NETCDFENV}/lib -lnetcdff -lnetcdf -L$ENV{HDF5_LIBRARIES} -lhdf5_hl -lhdf5_hl_cpp -lhdf5 -lhdf5_cpp")
elseif(HOST-Orion)
  SET(LIBZ      "$ENV{Z_LIB}")
  SET(NETCDFLIB  "-L${NETCDFENV}/lib -lnetcdff -lnetcdf -L$ENV{HDF5_LIBRARIES} -lhdf5_hl -lhdf5_hl_cpp -lhdf5 -lhdf5_cpp")
else()
  SET(LIBZ      "/usr/lib64/libz.so")
  SET(NETCDFLIB  "-L${NETCDFENV}/lib -lnetcdff -lnetcdf")
endif()
SET(LIBPNG "$ENV{PNG_LIB}")
SET(LIBJASPER "$ENV{JASPER_LIB}")

SET(GSILIBS "${GSIBUILD}/lib")
SET(LIBBUFR "$ENV{BUFR_LIB4}")
SET(LIBW3EMC "$ENV{W3EMC_LIB4}")
SET(LIBW3NCO "$ENV{W3NCO_LIB4}")
SET(LIBBACIO "$ENV{BACIO_LIB4}")
SET(LIBG2     "$ENV{G2_LIB4}")
SET(LIBG2TMPL "$ENV{G2TMPL_LIB}")
SET(LIBSP     "$ENV{SP_LIB4}")
SET(LIBCRTM   "$ENV{CRTM_LIB}")
SET(CONSTANTS "${GSIBUILD}/src/gsi/CMakeFiles/gsilib_wrf.dir/constants.f90.o")

SET(Fortran_FLAGS "-O3 -fp-model precise -assume byterecl -fpe0 -DLINUX -g -traceback")
SET(Fortran_LINK_FLAGS "-qopenmp")
SET(Fortran_FLAGS_bigEndian "-convert big_endian")
SET(C_FLAGS "-D_UNDERSCORE -DLINUX -Dfunder -DFortranByte=char -DFortranInt=int -DFortranLlong='long long'")

add_subdirectory(mosaic)
add_subdirectory(lightning/bufr)
add_subdirectory(lightning/netcdf)
add_subdirectory(ref2tten)
add_subdirectory(cloudanalysis)
add_subdirectory(larccld)
add_subdirectory(metarcld)
add_subdirectory(update_sst)
add_subdirectory(use_raphrrr_sfc)
